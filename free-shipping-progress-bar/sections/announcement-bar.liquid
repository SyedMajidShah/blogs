{%style%}
  .progress-bar-container {
    background: 'green'
  }
  {%endstyle%}
  {%- for block in section.blocks -%}
    {%- case block.type -%}
      {%- when 'announcement' -%}
        <div class="announcement-bar color-{{ block.settings.color_scheme }} gradient" role="region" aria-label="{{ 'sections.header.announcement' | t }}" {{ block.shopify_attributes }}>
          {%- if block.settings.text != blank -%}
            {%- if block.settings.link != blank -%}
              <a href="{{ block.settings.link }}" class="announcement-bar__link link link--text focus-inset animate-arrow">
            {%- endif -%}
                <div class="page-width">
                  <p class="announcement-bar__message {{ block.settings.text_alignment }} h5">
                    <span>{{ block.settings.text | escape }}</span>
                    {%- if block.settings.link != blank -%}
                      {% render 'icon-arrow' %}
                    {%- endif -%}
                    </p>
                    <free-shipping-progress-bar></free-shipping-progress-bar>
                </div>
            {%- if block.settings.link != blank -%}
              </a>
            {%- endif -%}
          {%- endif -%}
        </div>
    {%- endcase -%}
  {%- endfor -%}
  
  <script>
   class FreeShippingProgressBar extends HTMLElement {
    constructor() {
          super();
          const shadow = this.attachShadow({ mode: 'open' });
  
          const style = document.createElement('style');
          style.textContent = `
              body {
                  margin: 0;
                  padding: 0;
                  font-family: Arial, sans-serif;
              }
  
              .progress-bar-container {
                  position: fixed;
                  top: 0;
                  left: 0;
                  width: 100%;
                  background-color: #f0f0f0;
                  padding: 5px;
                  box-sizing: border-box;
              }
  
              .progress-bar {
                  height: 10px;
                  background-color: #4caf50;
                  width: 0;
                  transition: width 0.5s ease;
                  border-radius: 30px;
              }
  
              .progress-text {
                  font-size: 14px;
                  text-align: center;
                  color: #333;
              }
          `;
  
          // Append the style to the shadow DOM
          shadow.appendChild(style);
  
          // Create a container div in the shadow DOM
          const container = document.createElement('div');
          container.classList.add('progress-bar-container');
  
          const progressBarContainer = document.createElement('div')
          progressBarContainer.classList.add('progress-bar-container-div')
  
          // Create the progress bar and progress text elements
          const progressBar = document.createElement('div');
          progressBar.id = 'progress-bar';
          progressBar.classList.add('progress-bar');
  
          const progressText = document.createElement('div');
          progressText.id = 'progress-text';
          progressText.classList.add('progress-text');
  
          // Append the progress bar and progress text to the container
          progressBarContainer.appendChild(progressText);
          progressBarContainer.appendChild(progressBar);
  
          container.appendChild(progressBarContainer)
  
          // Append the container to the shadow DOM
          shadow.appendChild(container);
  
          // Set the targetAmount property
          this.threshold = 0;
          this.cartTotal = 0;
      }
  
      async getShopifyCart() {
        try {
          const response = await fetch('/cart.js', {
            method: 'GET',
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            }
          });
  
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
  
          const cartData = await response.json();
          return cartData.total_price / 100;
        } catch (error) {
          console.error('Error fetching Shopify cart:', error);
        }
      }
  
      async updateProgressBar(cartTotal, threshold, initial=false) {
          // Assume you have a way to get the current cart total from Shopify
          // const cartTotal = this.getCurrentCartTotal();
          const progressBar = this.shadowRoot.getElementById('progress-bar');
          const progressText = this.shadowRoot.getElementById('progress-text');
          if (!threshold) {
            progressBar.remove()
            progressText.remove()
            return
          }
  
          if (initial) {
            cartTotal = await this.getShopifyCart()
          }
  
          if (!cartTotal || cartTotal == 0) {
            progressText.innerHTML = `Free Shipping on Orders Over $${threshold}!`;
            progressBar.style.width = '0%'
            return
          }
  
          if (cartTotal >= threshold) {
              progressBar.style.width = '100%';
              progressText.innerHTML = 'Congratulations, you qualify for free shipping!';
          } else {
              const progressPercentage = (cartTotal / threshold) * 100;
              progressBar.style.width = `${progressPercentage}%`;
              progressText.innerHTML = `Only $${(threshold - cartTotal).toFixed(2)} away from free shipping`;
          }
      }
  
      initEventListeners() {
        document.addEventListener('cartUpdated:results', (e, args) => {
              const cartTotal = e.detail.cartTotal || 0
              const threshold = {{ settings.free-shipping-countdown  }} || 0
              this.updateProgressBar(cartTotal, threshold);
          });
      }
  
      connectedCallback() {
          const threshold = {{ settings.free-shipping-countdown }} || 0
          this.updateProgressBar(0, threshold, true);
          this.initEventListeners();
      }
  }
  customElements.define('free-shipping-progress-bar', FreeShippingProgressBar);
  
  </script>
  
  {% schema %}
  {
    "name": "t:sections.announcement-bar.name",
    "max_blocks": 12,
    "class": "announcement-bar-section",
    "blocks": [
      {
        "type": "announcement",
        "name": "t:sections.announcement-bar.blocks.announcement.name",
        "settings": [
          {
            "type": "text",
            "id": "text",
            "default": "Welcome to our store",
            "label": "t:sections.announcement-bar.blocks.announcement.settings.text.label"
          },
          {
            "type": "select",
            "id": "text_alignment",
            "options": [
              {
                "value": "left",
                "label": "t:sections.announcement-bar.blocks.announcement.settings.text_alignment.options__1.label"
              },
              {
                "value": "center",
                "label": "t:sections.announcement-bar.blocks.announcement.settings.text_alignment.options__2.label"
              },
              {
                "value": "right",
                "label": "t:sections.announcement-bar.blocks.announcement.settings.text_alignment.options__3.label"
              }
            ],
            "default": "center",
            "label": "t:sections.announcement-bar.blocks.announcement.settings.text_alignment.label"
          },
          {
            "type": "select",
            "id": "color_scheme",
            "options": [
              {
                "value": "accent-1",
                "label": "t:sections.all.colors.accent_1.label"
              },
              {
                "value": "accent-2",
                "label": "t:sections.all.colors.accent_2.label"
              },
              {
                "value": "background-1",
                "label": "t:sections.all.colors.background_1.label"
              },
              {
                "value": "background-2",
                "label": "t:sections.all.colors.background_2.label"
              },
              {
                "value": "inverse",
                "label": "t:sections.all.colors.inverse.label"
              }
            ],
            "default": "accent-1",
            "label": "t:sections.all.colors.label"
          },
          {
            "type": "url",
            "id": "link",
            "label": "t:sections.announcement-bar.blocks.announcement.settings.link.label"
          }
        ]
      }
    ],
    "default": {
      "blocks": [
        {
          "type": "announcement"
        }
      ]
    }
  }
  {% endschema %}
  